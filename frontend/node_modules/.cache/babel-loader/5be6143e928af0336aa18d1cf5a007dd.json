{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arvan Talaska\\\\Desktop\\\\Swinburne\\\\Semester 4\\\\Computing innovation project\\\\CyBuzz\\\\frontend\\\\src\\\\pages\\\\Upload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport \"./Upload.css\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Upload() {\n  _s();\n  // State variables to manage form input and upload status\n  const [contractName, setContractName] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [uploadError, setUploadError] = useState(null);\n\n  // This function is called when the file input changes\n  const handleFileChange = e => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  // This function is called when the form is submitted to upload the file\n  const handleUploadFile = async e => {\n    e.preventDefault();\n    if (!contractName || !selectedFile) {\n      setUploadError(\"Please provide both contract name and a file.\");\n      return;\n    }\n\n    // Create a FormData object to send the file and contractName to the server\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n    formData.append(\"contractName\", contractName);\n    try {\n      // Make an HTTP POST request to the server to upload the file\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        onUploadProgress: progressEvent => {\n          const progress = Math.round(progressEvent.loaded / progressEvent.total * 100);\n          setUploadProgress(progress);\n        }\n      });\n      if (response.status === 200) {\n        setUploadStatus(\"success\");\n      } else {\n        setUploadStatus(\"failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      setUploadError(\"Failed to upload the file. Please check the file type.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleUploadFile,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Upload Smart Contract\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"file\",\n              children: \"Select Smart Contract to upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"file\",\n              type: \"file\",\n              accept: \".sol\",\n              onChange: handleFileChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"contractName\",\n              children: \"Contract Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"contractName\",\n              value: contractName,\n              onChange: e => setContractName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), uploadError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error\",\n            children: uploadError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n            value: uploadProgress,\n            max: \"100\",\n            children: [uploadProgress, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), uploadStatus === \"success\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"response\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Smart Contract uploaded successfully\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Smart Contract will be analyzed and displayed in \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/Result\",\n                  children: \"results page\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 76\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 70\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), uploadStatus === \"failed\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Failed to upload file (Only .sol files allowed)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Upload, \"5/cBTheAEzRuvrLir+XLytiKSI8=\");\n_c = Upload;\nexport default Upload;\nvar _c;\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["React","useState","axios","Navbar","Footer","Link","Upload","contractName","setContractName","selectedFile","setSelectedFile","uploadProgress","setUploadProgress","uploadStatus","setUploadStatus","uploadError","setUploadError","handleFileChange","e","target","files","handleUploadFile","preventDefault","formData","FormData","append","response","post","onUploadProgress","progressEvent","progress","Math","round","loaded","total","status","error","console","value"],"sources":["C:/Users/Arvan Talaska/Desktop/Swinburne/Semester 4/Computing innovation project/CyBuzz/frontend/src/pages/Upload.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport \"./Upload.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Upload() {\r\n  // State variables to manage form input and upload status\r\n  const [contractName, setContractName] = useState(\"\");\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [uploadStatus, setUploadStatus] = useState(null);\r\n  const [uploadError, setUploadError] = useState(null);\r\n\r\n  // This function is called when the file input changes\r\n  const handleFileChange = (e) => {\r\n    setSelectedFile(e.target.files[0]);\r\n  };\r\n\r\n  // This function is called when the form is submitted to upload the file\r\n  const handleUploadFile = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!contractName || !selectedFile) {\r\n      setUploadError(\"Please provide both contract name and a file.\");\r\n      return;\r\n    }\r\n\r\n    // Create a FormData object to send the file and contractName to the server\r\n    const formData = new FormData();\r\n    formData.append(\"file\", selectedFile);\r\n    formData.append(\"contractName\", contractName);\r\n\r\n    try {\r\n      // Make an HTTP POST request to the server to upload the file\r\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const progress = Math.round((progressEvent.loaded / progressEvent.total) * 100);\r\n          setUploadProgress(progress);\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setUploadStatus(\"success\");\r\n      } else {\r\n        setUploadStatus(\"failed\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setUploadError(\"Failed to upload the file. Please check the file type.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div className=\"upload-container\">\r\n        <div></div>\r\n        <div className=\"form-container\">\r\n          <form onSubmit={handleUploadFile}>\r\n            <h1>Upload Smart Contract</h1>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"file\">Select Smart Contract to upload</label>\r\n              <input\r\n                id=\"file\"\r\n                type=\"file\"\r\n                accept=\".sol\"\r\n                onChange={handleFileChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"contractName\">Contract Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"contractName\"\r\n                value={contractName}\r\n                onChange={(e) => setContractName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            {uploadError && <div className=\"error\">{uploadError}</div>}\r\n            <button type=\"submit\">Upload</button>\r\n            {uploadProgress > 0 && (\r\n              <progress value={uploadProgress} max=\"100\">\r\n                {uploadProgress}%\r\n              </progress>\r\n            )}\r\n            {uploadStatus === \"success\" && (\r\n              <div className=\"response\">\r\n                <h3>Smart Contract uploaded successfully</h3>\r\n                <h4>Smart Contract will be analyzed and displayed in <span><Link to=\"/Result\">results page</Link></span></h4>\r\n              </div>\r\n            )}\r\n            {uploadStatus === \"failed\" && (\r\n              <div className=\"error\">\r\n                <h3>Failed to upload file (Only .sol files allowed)</h3>\r\n              </div>\r\n            )}\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Upload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}