{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arvan Talaska\\\\Desktop\\\\Swinburne\\\\Semester 4\\\\Computing innovation project\\\\CyBuzz\\\\frontend\\\\src\\\\pages\\\\Result.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport \"./Result.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Result = () => {\n  _s();\n  const [option1, setOption1] = useState(\"\");\n  const [option2, setOption2] = useState(\"\");\n  const [option3, setOption3] = useState(\"\");\n  const handleOption1Change = event => {\n    setOption1(event.target.value);\n  };\n  const handleOption2Change = event => {\n    setOption2(event.target.value);\n  };\n  const handleOption3Change = event => {\n    setOption3(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"center-heading \",\n        children: \"Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"result-p\",\n        children: \"Contract name: Audit #1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"result-p\",\n        children: \"Contract ID: 12344567899\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        className: \"collapsible\",\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Reentrancy Attacks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paragraph-content\",\n          children: [\"Reentrancy attack vectors exist because Solidity smart contracts execute imperatively: Each line of code must execute before the next one starts. This means that when a contract makes an external call to a different contract, the calling contract's execution is paused until the call returns. This effectively gives the called contract temporary control over what happens next, creating the possibility of an infinite loop.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), \"Fix: This vulnerability occurs when the code logic of a smart contract is flawed. Developers need to carefully design external calls and always check and update the contract's state, such as decreasing the Ether balance before fulfilling requests to send funds. Adding a reentrancy guard can prevent more than one function from being executed at a time by locking the contract. Various audit tools, such as Slither, Mythril and Securify, can check for the presence of the different types of reentrancy vulnerabilities.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        className: \"collapsible\",\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Integer Overflow/Underflow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paragraph-content\",\n          children: [\"Integer underflows and overflows occur when the result of an arithmetic operation falls outside the fixed-size range of values: 0 to 255 in the case of integer type uint8. Values higher than 255 overflow and are reset to 0, while values lower than 0 reset to 255. This causes unexpected changes to a contract's state variables and logic and triggers invalid operations.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), \"Fix: Since version 0.8.0, the Solidity compiler no longer allows code that could result in integer underflows and overflows. Check any contracts compiled with earlier versions for functions involving arithmetic operations or use a library, such as SafeMath, to check for underflow and overflow issues.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        className: \"collapsible\",\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Gas Griefing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paragraph-content\",\n          children: [\"To perform a transaction or execute a smart contract on the Ethereum blockchain platform, users must pay a gas fee. It is paid to incentivize validators (miners) to commit the resources needed to verify transactions. The price of gas is determined by supply, demand and network capacity at the time of the transaction.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), \"Gas griefing occurs when a user sends the amount of gas required to execute the target smart contract but not enough to execute subcalls -- calls it makes to other contracts. If the contract does not check if the required gas to execute a subcall is available, the subcall will not execute as expected. This can have a significant effect on the application's logic.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), \"Fix: No effective technique to prevent gas griefing exists. All a developer can do is code the contract so it sets the amount of gas to be sent, not the user. A rise in gas costs, however, could mean that the transaction fails.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"result-p\",\n        id: \"result-p\",\n        children: \"3 vulnerabilities found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Result, \"asc2EZt/T5PKkVW2mUgz1zc1/aU=\");\n_c = Result;\nexport default Result;\nvar _c;\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["React","useState","Navbar","Footer","Result","option1","setOption1","option2","setOption2","option3","setOption3","handleOption1Change","event","target","value","handleOption2Change","handleOption3Change"],"sources":["C:/Users/Arvan Talaska/Desktop/Swinburne/Semester 4/Computing innovation project/CyBuzz/frontend/src/pages/Result.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport \"./Result.css\";\nconst Result = () => {\n\n  const [option1, setOption1] = useState(\"\");\n  const [option2, setOption2] = useState(\"\");\n  const [option3, setOption3] = useState(\"\");\n\n  const handleOption1Change = (event) => {\n    setOption1(event.target.value);\n  };\n\n  const handleOption2Change = (event) => {\n    setOption2(event.target.value);\n  };\n\n  const handleOption3Change = (event) => {\n    setOption3(event.target.value);\n  };\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <div className=\"result-container\">\n        <h1 className=\"center-heading \">Result</h1>\n        <p className=\"result-p\">Contract name: Audit #1</p>\n        <p className=\"result-p\">Contract ID: 12344567899</p>\n        <details className=\"collapsible\">\n          <summary>Reentrancy Attacks</summary>\n          <div className=\"paragraph-content\">\n            Reentrancy attack vectors exist because Solidity smart contracts\n            execute imperatively: Each line of code must execute before the next\n            one starts. This means that when a contract makes an external call\n            to a different contract, the calling contract's execution is paused\n            until the call returns. This effectively gives the called contract\n            temporary control over what happens next, creating the possibility\n            of an infinite loop.\n            <br />\n            <br />\n            Fix: This vulnerability occurs when the code logic of a smart\n            contract is flawed. Developers need to carefully design external\n            calls and always check and update the contract's state, such as\n            decreasing the Ether balance before fulfilling requests to send\n            funds. Adding a reentrancy guard can prevent more than one function\n            from being executed at a time by locking the contract. Various audit\n            tools, such as Slither, Mythril and Securify, can check for the\n            presence of the different types of reentrancy vulnerabilities.\n          </div>\n        </details>\n        <details className=\"collapsible\">\n          <summary>Integer Overflow/Underflow</summary>\n          <div className=\"paragraph-content\">\n            Integer underflows and overflows occur when the result of an\n            arithmetic operation falls outside the fixed-size range of values: 0\n            to 255 in the case of integer type uint8. Values higher than 255\n            overflow and are reset to 0, while values lower than 0 reset to 255.\n            This causes unexpected changes to a contract's state variables and\n            logic and triggers invalid operations.\n            <br />\n            <br />\n            Fix: Since version 0.8.0, the Solidity compiler no longer allows\n            code that could result in integer underflows and overflows. Check\n            any contracts compiled with earlier versions for functions involving\n            arithmetic operations or use a library, such as SafeMath, to check\n            for underflow and overflow issues.\n          </div>\n        </details>\n        <details className=\"collapsible\">\n          <summary>Gas Griefing</summary>\n          <div className=\"paragraph-content\">\n            To perform a transaction or execute a smart contract on the Ethereum\n            blockchain platform, users must pay a gas fee. It is paid to\n            incentivize validators (miners) to commit the resources needed to\n            verify transactions. The price of gas is determined by supply,\n            demand and network capacity at the time of the transaction.\n            <br />\n            <br />\n            Gas griefing occurs when a user sends the amount of gas required to\n            execute the target smart contract but not enough to execute subcalls\n            -- calls it makes to other contracts. If the contract does not check\n            if the required gas to execute a subcall is available, the subcall\n            will not execute as expected. This can have a significant effect on\n            the application's logic.\n            <br />\n            <br />\n            Fix: No effective technique to prevent gas griefing exists. All a\n            developer can do is code the contract so it sets the amount of gas\n            to be sent, not the user. A rise in gas costs, however, could mean\n            that the transaction fails.\n          </div>\n        </details>\n        <p className=\"result-p\" id=\"result-p\">\n          3 vulnerabilities found\n        </p>\n        <br/> \n        <br/> \n        <br/> \n        <br/> \n      </div>\n\n      <Footer></Footer>\n    </div>\n  );\n};\n\nexport default Result;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}